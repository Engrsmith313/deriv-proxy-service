{
  "name": "My workflow 5 - Enhanced with WebSocket",
  "nodes": [
    {
      "parameters": {
        "url": "wss://deriv-proxy-service-2.onrender.com/ws",
        "options": {
          "reconnect": true,
          "reconnectInterval": 5000
        }
      },
      "type": "n8n-nodes-base.webSocket",
      "typeVersion": 1,
      "position": [
        400,
        1200
      ],
      "id": "websocket-connection",
      "name": "WebSocket Connection"
    },
    {
      "parameters": {
        "functionCode": "// Handle WebSocket connection and authentication\nconst message = $json;\n\n// If this is a connection event, send authentication\nif (message.type === 'connection' || !message.type) {\n  console.log('WebSocket connected, sending authentication...');\n  return {\n    json: {\n      type: 'auth',\n      timestamp: Date.now(),\n      data: {\n        apiKey: 'secure-production-key-2025'\n      }\n    }\n  };\n}\n\n// Pass through all other messages\nreturn { json: message };"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        600,
        1200
      ],
      "id": "websocket-auth-handler",
      "name": "WebSocket Auth Handler"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "trade-result-condition",
              "leftValue": "={{ $json.type }}",
              "rightValue": "trade_result",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        800,
        1200
      ],
      "id": "websocket-message-filter",
      "name": "WebSocket Message Filter"
    },
    {
      "parameters": {
        "functionCode": "// Process real-time trade result from WebSocket\nconst wsData = $json.data;\n\nif (!wsData || !wsData.contractId) {\n  console.log('Invalid WebSocket trade result data');\n  return { json: { skip: true } };\n}\n\nconsole.log(`üéØ Real-time trade result received for contract ${wsData.contractId}`);\nconsole.log(`Status: ${wsData.status}, Profit: ${wsData.profit}`);\n\n// Format the data for Telegram notification\nconst tradeWon = wsData.status === 'won';\nconst emoji = tradeWon ? 'üéâ' : 'üòû';\nconst statusText = tradeWon ? 'TRADE WIN' : 'TRADE LOSS';\n\nreturn {\n  json: {\n    // WebSocket real-time data\n    contractId: wsData.contractId,\n    symbol: wsData.symbol,\n    contractType: wsData.contractType,\n    stake: wsData.stake,\n    buyPrice: wsData.buyPrice,\n    payout: wsData.payout,\n    profit: wsData.profit,\n    profitPercentage: wsData.profitPercentage,\n    status: wsData.status,\n    entrySpot: wsData.entrySpot,\n    exitSpot: wsData.exitSpot,\n    currentSpot: wsData.currentSpot,\n    balanceAfter: wsData.balanceAfter,\n    \n    // Formatted for notification\n    tradeWon: tradeWon,\n    emoji: emoji,\n    statusText: statusText,\n    netProfit: wsData.profit,\n    actualPayout: tradeWon ? wsData.payout : 0,\n    actualLoss: tradeWon ? 0 : wsData.stake,\n    \n    // Metadata\n    timestamp: new Date().toISOString(),\n    source: 'websocket',\n    longcode: wsData.longcode,\n    shortcode: wsData.shortcode\n  }\n};"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1000,
        1120
      ],
      "id": "websocket-trade-processor",
      "name": "WebSocket Trade Processor"
    },
    {
      "parameters": {
        "chatId": "6130097075",
        "text": "={{$json.emoji}} **{{$json.statusText}}** - REAL-TIME UPDATE\n\nüìä **Contract**: {{$json.contractId}}\nüí∞ **Symbol**: {{$json.symbol}}\nüìà **Type**: {{$json.contractType}}\nüíµ **Stake**: ${{$json.stake}}\nüí∏ **Payout**: ${{$json.payout}}\nüìä **Profit**: ${{$json.profit}} ({{$json.profitPercentage}}%)\n‚è∞ **Entry**: {{$json.entrySpot}}\nüèÅ **Exit**: {{$json.exitSpot}}\nüí∞ **Balance**: ${{$json.balanceAfter}}\n\nüöÄ **INSTANT NOTIFICATION VIA WEBSOCKET**\n‚è∞ {{$json.timestamp}}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1200,
        1120
      ],
      "id": "websocket-telegram-notification",
      "name": "WebSocket Telegram Notification",
      "credentials": {
        "telegramApi": {
          "id": "6d5bIxnSqIv9tsK6",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "trade-status-condition",
              "leftValue": "={{ $json.type }}",
              "rightValue": "trade_status",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        800,
        1320
      ],
      "id": "websocket-status-filter",
      "name": "WebSocket Status Filter"
    },
    {
      "parameters": {
        "functionCode": "// Process real-time trade status updates from WebSocket\nconst wsData = $json.data;\n\nif (!wsData || !wsData.contractId || wsData.status !== 'open') {\n  // Only process open trade status updates\n  return { json: { skip: true } };\n}\n\nconsole.log(`üìä Trade status update for contract ${wsData.contractId}`);\nconsole.log(`Current profit: ${wsData.profit}, Spot: ${wsData.currentSpot}`);\n\n// Format status update\nconst profitEmoji = wsData.profit >= 0 ? 'üìà' : 'üìâ';\nconst profitColor = wsData.profit >= 0 ? 'green' : 'red';\n\nreturn {\n  json: {\n    contractId: wsData.contractId,\n    status: wsData.status,\n    currentSpot: wsData.currentSpot,\n    profit: wsData.profit,\n    profitPercentage: wsData.profitPercentage,\n    profitEmoji: profitEmoji,\n    timestamp: new Date().toISOString(),\n    source: 'websocket_status'\n  }\n};"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1000,
        1280
      ],
      "id": "websocket-status-processor",
      "name": "WebSocket Status Processor"
    },
    {
      "parameters": {
        "chatId": "6130097075",
        "text": "={{$json.profitEmoji}} **LIVE TRADE UPDATE**\n\nüìä **Contract**: {{$json.contractId}}\nüìà **Status**: {{$json.status.toUpperCase()}}\nüí∞ **Current Profit**: ${{$json.profit}} ({{$json.profitPercentage}}%)\nüìç **Current Spot**: {{$json.currentSpot}}\n\n‚è∞ {{$json.timestamp}}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1200,
        1280
      ],
      "id": "websocket-status-notification",
      "name": "WebSocket Status Notification",
      "credentials": {
        "telegramApi": {
          "id": "6d5bIxnSqIv9tsK6",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "auth-response-condition",
              "leftValue": "={{ $json.type }}",
              "rightValue": "auth_response",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        800,
        1080
      ],
      "id": "websocket-auth-filter",
      "name": "WebSocket Auth Filter"
    },
    {
      "parameters": {
        "functionCode": "// Handle WebSocket authentication response\nconst authData = $json.data;\n\nif (authData && authData.success) {\n  console.log('‚úÖ WebSocket authentication successful');\n  console.log(`Client ID: ${authData.clientId}`);\n  \n  return {\n    json: {\n      authenticated: true,\n      clientId: authData.clientId,\n      message: authData.message,\n      timestamp: new Date().toISOString()\n    }\n  };\n} else {\n  console.log('‚ùå WebSocket authentication failed');\n  console.log(`Error: ${authData?.message}`);\n  \n  return {\n    json: {\n      authenticated: false,\n      error: authData?.message || 'Authentication failed',\n      timestamp: new Date().toISOString()\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1000,
        1040
      ],
      "id": "websocket-auth-processor",
      "name": "WebSocket Auth Processor"
    },
    {
      "parameters": {
        "chatId": "6130097075",
        "text": "={{$json.authenticated ? 'üîê WebSocket Connected & Authenticated' : '‚ùå WebSocket Authentication Failed'}}\n\n{{$json.authenticated ? '‚úÖ Ready to receive real-time trade updates!' : '‚ö†Ô∏è Error: ' + $json.error}}\n\n‚è∞ {{$json.timestamp}}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1200,
        1040
      ],
      "id": "websocket-auth-notification",
      "name": "WebSocket Auth Notification",
      "credentials": {
        "telegramApi": {
          "id": "6d5bIxnSqIv9tsK6",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -1680,
        1008
      ],
      "id": "603d248c-b8a8-4f1d-9fdb-cf3536511bf7",
      "name": "When chat message received",
      "webhookId": "18ab4fe5-2eb6-4c46-a527-3acecff31357"
    },
    {
      "parameters": {
        "functionCode": "// Ultra-simple version for testing with chat-triggered input\nconst inputAmount = $json.deltaAmount;\nconst position = $json.position || \"CALL\";\n\nconsole.log('Input received:', inputAmount, 'Type:', typeof inputAmount);\n\n// Convert to number if it's a string\nlet amount = Number(inputAmount);\n\nif (isNaN(amount) || amount <= 0) {\n  // If invalid, use a default\n  amount = 100;\n  console.log('Using default amount:', amount);\n}\n\n// Simple percentage calculation (random between 65‚Äì80%)\nlet percentage = 65 + (Math.random() * 15);\npercentage = Math.round(percentage * 100) / 100;\n\nconsole.log('Generated percentage:', percentage);\n\nreturn {\n  deltaAmount: amount,\n  profitPercentage: percentage,\n  tradeSymbol: $json.tradeSymbol || \"R_100\",\n  duration: $json.duration || 5,\n  position: position\n};"
      },
      "id": "5533ed19-10eb-4132-87ae-6fdaf210fb7e",
      "name": "Generate Profit Percentage1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1296,
        848
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get the input message - try multiple possible property names from chat trigger\nconst input = $json.chatInput || $json.message || $json.body || $json.text || \"\";\n\nif (!input || input.trim() === \"\") {\n  throw new Error(\"‚ùå Invalid input format!\\n\\nExpected format: <POSITION> <AMOUNT>\\nExamples:\\n‚Ä¢ PUT 50\\n‚Ä¢ CALL 25\\n\\nPlease try again with the correct format.\");\n}\n\nconst parts = input.trim().split(\" \");\n\n// Strict validation - must have exactly 2 parts\nif (parts.length !== 2) {\n  throw new Error(\"‚ùå Invalid input format!\\n\\nExpected format: <POSITION> <AMOUNT>\\nExamples:\\n‚Ä¢ PUT 50\\n‚Ä¢ CALL 25\\n\\nYou provided: \" + parts.length + \" parameters. Please provide exactly 2 parameters.\");\n}\n\nconst position = parts[0].toUpperCase();\nconst deltaAmount = Number(parts[1]);\n\n// Strict position validation\nif (![\"CALL\", \"PUT\"].includes(position)) {\n  throw new Error(\"‚ùå Invalid position type!\\n\\nPosition must be either 'CALL' or 'PUT'\\nYou provided: '\" + parts[0] + \"'\\n\\nCorrect format: <POSITION> <AMOUNT>\\nExamples:\\n‚Ä¢ PUT 50\\n‚Ä¢ CALL 25\");\n}\n\n// Strict amount validation\nif (isNaN(deltaAmount) || deltaAmount <= 0) {\n  throw new Error(\"‚ùå Invalid amount!\\n\\nAmount must be a positive number\\nYou provided: '\" + parts[1] + \"'\\n\\nCorrect format: <POSITION> <AMOUNT>\\nExamples:\\n‚Ä¢ PUT 50\\n‚Ä¢ CALL 25\");\n}\n\n// Only proceed with valid input - no fallbacks\nreturn {\n  deltaAmount: deltaAmount,\n  position: position,\n  tradeSymbol: \"R_100\",\n  duration: 5\n};"
      },
      "id": "53570166-b135-480a-bcb3-9543b124285e",
      "name": "Parse chat input1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1488,
        1008
      ]
    },
    {
      "parameters": {
        "chatId": "6130097075",
        "text": "=‚úÖ **TRADE EXECUTED SUCCESSFULLY**\n\nReference: {{$json.tradeId}}\nContract: {{$json.contractId}}\nSymbol: {{$json.tradeSymbol}}\nDuration: {{$json.duration}} ticks\n\nInvestment: ${{$json.originalStake.toFixed(2)}}\nBuy Price: ${{$json.buyPrice.toFixed(2)}}\nExpected Payout: ${{$json.payout.toFixed(2)}}\n\nüíº Broker Commission: ${{$json.actualBrokerCommission.toFixed(2)}}\nBalance After: ${{$json.balanceAfter.toFixed(2)}}\n\nExecuted: {{$json.executionTimestamp}}\n\nüì° **Real-time results will be sent via WebSocket when trade completes!**",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "cc96a278-1448-4230-afb5-cd21d96e34dd",
      "name": "Post-Trade Telegram Notification1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -112,
        672
      ],
      "webhookId": "dca3a438-7f89-4107-8525-c67e0b0aca18",
      "credentials": {
        "telegramApi": {
          "id": "6d5bIxnSqIv9tsK6",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// COMPREHENSIVE COMMISSION TRACKING FOR DERIV TRADING SYSTEM\nconsole.log('=== COMMISSION TRACKING START ===');\n\n// Extract data from previous nodes\nconst data = $json.result || $json;\nconsole.log('Processing commission data...');\n\n// Validate that we have the required data\nif (!data || typeof data !== 'object') {\n  throw new Error('No trade data received for commission tracking');\n}\n\n// Extract commission and trade information\nconst tradeInfo = {\n  tradeId: data.tradeId || `TRADE_${Date.now()}`,\n  contractId: data.contractId || 'N/A',\n  timestamp: data.timestamp || new Date().toISOString(),\n  tradeResult: data.tradeResult || 'UNKNOWN',\n  tradeWon: data.tradeWon || false,\n  originalStake: data.originalStake || 0,\n  actualBrokerCommission: data.actualBrokerCommission || 0,\n  actualPayout: data.actualPayout || 0,\n  actualLoss: data.actualLoss || 0\n};\n\n// Calculate trader profit/loss\nconst traderProfitLoss = tradeInfo.tradeWon ? \n  (tradeInfo.actualPayout - tradeInfo.originalStake) : \n  -tradeInfo.originalStake;\n\n// Get current date for session tracking\nconst currentDate = new Date(tradeInfo.timestamp).toISOString().split('T')[0];\nconst currentSession = `SESSION_${currentDate}`;\n\nconsole.log('Current trade commission:', tradeInfo.actualBrokerCommission);\nconsole.log('Current session:', currentSession);\n\n// Get workflow static data for persistent storage\nconst staticData = this.getWorkflowStaticData('global');\n\n// Initialize commission tracking if not exists\nif (!staticData.commissionTracking) {\n  staticData.commissionTracking = {\n    // Overall totals\n    totalCommissions: 0,\n    totalTrades: 0,\n    totalVolume: 0,\n    totalWins: 0,\n    totalLosses: 0,\n    totalTraderProfit: 0,\n    \n    // Session tracking\n    currentSession: currentSession,\n    sessionCommissions: 0,\n    sessionTrades: 0,\n    sessionVolume: 0,\n    sessionWins: 0,\n    sessionLosses: 0,\n    sessionTraderProfit: 0,\n    \n    // Historical data\n    sessionHistory: {},\n    lastTradeTimestamp: null,\n    \n    // Performance metrics\n    bestSession: { session: null, commission: 0, trades: 0 },\n    worstSession: { session: null, commission: 0, trades: 0 },\n    \n    // Tracking start date\n    trackingStarted: new Date().toISOString()\n  };\n  \n  console.log('‚úÖ Commission tracking initialized');\n}\n\nconst tracking = staticData.commissionTracking;\n\n// Check if we need to start a new session\nif (tracking.currentSession !== currentSession) {\n  console.log(`üìä Starting new session: ${currentSession}`);\n  console.log(`üìà Previous session (${tracking.currentSession}) summary:`);\n  console.log(`   - Trades: ${tracking.sessionTrades}`);\n  console.log(`   - Commission: $${tracking.sessionCommissions.toFixed(2)}`);\n  console.log(`   - Volume: $${tracking.sessionVolume.toFixed(2)}`);\n  console.log(`   - Win Rate: ${tracking.sessionTrades > 0 ? ((tracking.sessionWins / tracking.sessionTrades) * 100).toFixed(2) : 0}%`);\n  \n  // Save previous session to history\n  if (tracking.currentSession && tracking.sessionTrades > 0) {\n    tracking.sessionHistory[tracking.currentSession] = {\n      commission: tracking.sessionCommissions,\n      trades: tracking.sessionTrades,\n      volume: tracking.sessionVolume,\n      wins: tracking.sessionWins,\n      losses: tracking.sessionLosses,\n      traderProfit: tracking.sessionTraderProfit,\n      winRate: (tracking.sessionWins / tracking.sessionTrades) * 100,\n      avgCommissionPerTrade: tracking.sessionCommissions / tracking.sessionTrades,\n      date: tracking.currentSession.replace('SESSION_', '')\n    };\n    \n    // Update best/worst session tracking\n    if (tracking.sessionCommissions > tracking.bestSession.commission) {\n      tracking.bestSession = {\n        session: tracking.currentSession,\n        commission: tracking.sessionCommissions,\n        trades: tracking.sessionTrades\n      };\n    }\n    \n    if (tracking.worstSession.session === null || tracking.sessionCommissions < tracking.worstSession.commission) {\n      tracking.worstSession = {\n        session: tracking.currentSession,\n        commission: tracking.sessionCommissions,\n        trades: tracking.sessionTrades\n      };\n    }\n  }\n  \n  // Reset session counters\n  tracking.currentSession = currentSession;\n  tracking.sessionCommissions = 0;\n  tracking.sessionTrades = 0;\n  tracking.sessionVolume = 0;\n  tracking.sessionWins = 0;\n  tracking.sessionLosses = 0;\n  tracking.sessionTraderProfit = 0;\n}\n\n// Update tracking with current trade\ntracking.totalCommissions += tradeInfo.actualBrokerCommission;\ntracking.totalTrades += 1;\ntracking.totalVolume += tradeInfo.originalStake;\ntracking.totalTraderProfit += traderProfitLoss;\n\ntracking.sessionCommissions += tradeInfo.actualBrokerCommission;\ntracking.sessionTrades += 1;\ntracking.sessionVolume += tradeInfo.originalStake;\ntracking.sessionTraderProfit += traderProfitLoss;\n\n// Update win/loss counters\nif (tradeInfo.tradeWon) {\n  tracking.totalWins += 1;\n  tracking.sessionWins += 1;\n} else {\n  tracking.totalLosses += 1;\n  tracking.sessionLosses += 1;\n}\n\ntracking.lastTradeTimestamp = tradeInfo.timestamp;\n\n// Calculate performance metrics\nconst overallWinRate = tracking.totalTrades > 0 ? (tracking.totalWins / tracking.totalTrades) * 100 : 0;\nconst sessionWinRate = tracking.sessionTrades > 0 ? (tracking.sessionWins / tracking.sessionTrades) * 100 : 0;\nconst avgCommissionPerTrade = tracking.totalTrades > 0 ? tracking.totalCommissions / tracking.totalTrades : 0;\nconst avgSessionCommission = tracking.sessionTrades > 0 ? tracking.sessionCommissions / tracking.sessionTrades : 0;\nconst commissionRate = tracking.totalVolume > 0 ? (tracking.totalCommissions / tracking.totalVolume) * 100 : 0;\nconst sessionCommissionRate = tracking.sessionVolume > 0 ? (tracking.sessionCommissions / tracking.sessionVolume) * 100 : 0;\n\n// Calculate net performance (trader profit - commissions)\nconst netTraderProfit = tracking.totalTraderProfit - tracking.totalCommissions;\nconst netSessionProfit = tracking.sessionTraderProfit - tracking.sessionCommissions;\n\n// Save updated tracking data\nstaticData.commissionTracking = tracking;\n\n// Log current statistics\nconsole.log('üìä COMMISSION TRACKING SUMMARY:');\nconsole.log('=================================');\nconsole.log('CURRENT TRADE:');\nconsole.log(`  Commission: $${tradeInfo.actualBrokerCommission.toFixed(2)}`);\nconsole.log(`  Trader P/L: $${traderProfitLoss.toFixed(2)}`);\nconsole.log('');\nconsole.log('SESSION TOTALS:');\nconsole.log(`  Trades: ${tracking.sessionTrades}`);\nconsole.log(`  Commission: $${tracking.sessionCommissions.toFixed(2)}`);\nconsole.log(`  Volume: $${tracking.sessionVolume.toFixed(2)}`);\nconsole.log(`  Win Rate: ${sessionWinRate.toFixed(2)}%`);\nconsole.log(`  Avg Commission/Trade: $${avgSessionCommission.toFixed(2)}`);\nconsole.log(`  Commission Rate: ${sessionCommissionRate.toFixed(2)}%`);\nconsole.log(`  Net Profit: $${netSessionProfit.toFixed(2)}`);\nconsole.log('');\nconsole.log('OVERALL TOTALS:');\nconsole.log(`  Total Trades: ${tracking.totalTrades}`);\nconsole.log(`  Total Commission: $${tracking.totalCommissions.toFixed(2)}`);\nconsole.log(`  Total Volume: $${tracking.totalVolume.toFixed(2)}`);\nconsole.log(`  Overall Win Rate: ${overallWinRate.toFixed(2)}%`);\nconsole.log(`  Avg Commission/Trade: $${avgCommissionPerTrade.toFixed(2)}`);\nconsole.log(`  Overall Commission Rate: ${commissionRate.toFixed(2)}%`);\nconsole.log(`  Net Trader Profit: $${netTraderProfit.toFixed(2)}`);\n\n// Return comprehensive tracking data\nreturn {\n  ...data,\n  commissionTracking: {\n    // Current trade info\n    currentTrade: {\n      tradeId: tradeInfo.tradeId,\n      contractId: tradeInfo.contractId,\n      commission: tradeInfo.actualBrokerCommission,\n      traderProfitLoss: traderProfitLoss,\n      timestamp: tradeInfo.timestamp\n    },\n    \n    // Session statistics\n    session: {\n      name: currentSession,\n      trades: tracking.sessionTrades,\n      commission: tracking.sessionCommissions,\n      volume: tracking.sessionVolume,\n      wins: tracking.sessionWins,\n      losses: tracking.sessionLosses,\n      winRate: sessionWinRate,\n      avgCommissionPerTrade: avgSessionCommission,\n      commissionRate: sessionCommissionRate,\n      traderProfit: tracking.sessionTraderProfit,\n      netProfit: netSessionProfit\n    },\n    \n    // Overall statistics\n    overall: {\n      totalTrades: tracking.totalTrades,\n      totalCommission: tracking.totalCommissions,\n      totalVolume: tracking.totalVolume,\n      totalWins: tracking.totalWins,\n      totalLosses: tracking.totalLosses,\n      overallWinRate: overallWinRate,\n      avgCommissionPerTrade: avgCommissionPerTrade,\n      commissionRate: commissionRate,\n      totalTraderProfit: tracking.totalTraderProfit,\n      netTraderProfit: netTraderProfit,\n      trackingStarted: tracking.trackingStarted\n    },\n    \n    // Performance insights\n    performance: {\n      bestSession: tracking.bestSession,\n      worstSession: tracking.worstSession,\n      totalSessions: Object.keys(tracking.sessionHistory).length + 1,\n      avgSessionCommission: Object.keys(tracking.sessionHistory).length > 0 ? \n        Object.values(tracking.sessionHistory).reduce((sum, s) => sum + s.commission, 0) / Object.keys(tracking.sessionHistory).length : \n        tracking.sessionCommissions\n    },\n    \n    // Metadata\n    lastUpdated: new Date().toISOString(),\n    trackingActive: true\n  }\n};"
      },
      "id": "0edafcbc-0f6f-4c2b-9a12-8bd36cbe75dd",
      "name": "Track Commissions1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        48,
        960
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1NzWq9dSzGooIytKjCrSgY1hnK2G7kpVBMxmgofK7ieI",
          "mode": "list",
          "cachedResultName": "Deriv Trading Audit Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1NzWq9dSzGooIytKjCrSgY1hnK2G7kpVBMxmgofK7ieI/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1NzWq9dSzGooIytKjCrSgY1hnK2G7kpVBMxmgofK7ieI/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Contract ID": "={{$json.contractId || 'N/A'}}",
            "Trade Date": "={{$json.timestamp ? $json.timestamp.split('T')[0] : new Date().toISOString().split('T')[0]}}",
            "Trade Time": "={{$json.timestamp ? $json.timestamp.split('T')[1].split('.')[0] : new Date().toISOString().split('T')[1].split('.')[0]}}",
            "Symbol": "={{$json.tradeSymbol || 'N/A'}}",
            "Duration": "={{$json.duration || 'N/A'}}",
            "Original Stake": "={{$json.originalStake || 0}}",
            "Profit Target %": "={{($json.profitPercentage || 0).toFixed(2)}}",
            "Entry Fee": "={{($json.entryFee || 0).toFixed(2)}}",
            "Sent to Exchange": "={{($json.sentToExchange || 0).toFixed(2)}}",
            "Buy Price": "={{($json.buyPrice || 0).toFixed(2)}}",
            "Trade Result": "={{$json.tradeResult || 'UNKNOWN'}}",
            "Payout/Loss": "={{$json.tradeWon ? ($json.actualPayout || 0).toFixed(2) : ($json.actualLoss || 0).toFixed(2)}}",
            "Broker Commission": "={{($json.actualBrokerCommission || 0).toFixed(2)}}",
            "Trader Profit/Loss": "={{$json.tradeWon ? (($json.actualPayout || 0) - ($json.originalStake || 0)).toFixed(2) : (-($json.originalStake || 0)).toFixed(2)}}",
            "ROI %": "={{$json.tradeWon ? ((($json.actualPayout || 0) - ($json.originalStake || 0)) / ($json.originalStake || 1) * 100).toFixed(2) : ((-($json.originalStake || 0)) / ($json.originalStake || 1) * 100).toFixed(2)}}",
            "Commission Rate %": "={{(($json.actualBrokerCommission || 0) / ($json.originalStake || 1) * 100).toFixed(2)}}",
            "Session": "={{\"SESSION_\" + ($json.timestamp ? $json.timestamp.split('T')[0] : new Date().toISOString().split('T')[0])}}",
            "Trade ID": "={{$json.tradeId || 'TRADE_' + Date.now()}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Trade ID",
              "displayName": "Trade ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Contract ID",
              "displayName": "Contract ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Trade Date",
              "displayName": "Trade Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Trade Time",
              "displayName": "Trade Time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Symbol",
              "displayName": "Symbol",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Original Stake",
              "displayName": "Original Stake",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Profit Target %",
              "displayName": "Profit Target %",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Entry Fee",
              "displayName": "Entry Fee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Sent to Exchange",
              "displayName": "Sent to Exchange",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Buy Price",
              "displayName": "Buy Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Trade Result",
              "displayName": "Trade Result",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Payout/Loss",
              "displayName": "Payout/Loss",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Trader Profit/Loss",
              "displayName": "Trader Profit/Loss",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Broker Commission",
              "displayName": "Broker Commission",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ROI %",
              "displayName": "ROI %",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Commission Rate %",
              "displayName": "Commission Rate %",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Session",
              "displayName": "Session",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -144,
        960
      ],
      "id": "49753d7a-791b-4c3a-904f-8d7d314e0b09",
      "name": "Log to Google Sheets1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ukvhb3p8Gat3uMBq",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "6130097075",
        "text": "=üöÄ TRADE STARTING\n\nReference: {{$json.tradeId}}\nMarket: {{$json.tradeSymbol}}\nPosition: {{$json.position}}\nDuration: {{$json.duration}} ticks\n\nInvestment: ${{$json.originalStake.toFixed(2)}}\nFee: ${{$json.entryFee.toFixed(2)}}\nTrading: ${{$json.sentToExchange.toFixed(2)}}\n\nTarget: {{$json.profitPercentage.toFixed(1)}}%\nExpected Profit: ${{$json.traderPayout.toFixed(2)}}\n\n‚è≥ Executing trade...",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "c7adab6e-0474-4429-8a76-b36ba9c925fe",
      "name": "Pre-Trade Telegram Notification1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -848,
        688
      ],
      "webhookId": "8778446b-db6c-472d-82e0-a7105a7fdf7f",
      "credentials": {
        "telegramApi": {
          "id": "6d5bIxnSqIv9tsK6",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Commission Calculator Function - Updated with 2 decimal place precision\nfunction calculateCommissions(stake, profitPercentage) {\n  const T = Number(stake);\n  const p = Number(profitPercentage) / 100;\n  const mult = 1.95; // Fixed exchange multiplier for Delta\n\n  // Validation\n  if (!(T > 0)) return { ok: false, reason: \"Please input a valid stake\" };\n  if (p < 0) return { ok: false, reason: \"Profit % cannot be negative\" };\n\n  const denom = 2 * mult + 1;\n  const X = ((mult - 1 - p) / denom) * T;\n\n  if (X < 0) return { \n    ok: false, \n    reason: `With multiplier ${mult} and target profit ${profitPercentage}%, fees become negative.` \n  };\n  if (2 * X >= T) return { \n    ok: false, \n    reason: \"Entry fee (2X) cannot be >= stake. Adjust inputs.\" \n  };\n\n  // Calculate all values with 2 decimal place precision\n  const entryFee = Math.round((2 * X) * 100) / 100;\n  const sentToExchange = Math.round((T - entryFee) * 100) / 100;\n  const exchangeReturns = Math.round((mult * sentToExchange) * 100) / 100;\n  const postTradeFee = Math.round(X * 100) / 100;\n  const traderPayout = Math.round((exchangeReturns - postTradeFee) * 100) / 100;\n  const brokerWinCommission = Math.round((3 * X) * 100) / 100;\n  const brokerLoseCommission = Math.round((2 * X) * 100) / 100;\n  const brokerBaseFee = Math.round(X * 100) / 100;\n  const actualProfitPercentage = Math.round(((traderPayout / T) - 1) * 100 * 100) / 100;\n\n  return {\n    ok: true,\n    originalStake: Math.round(T * 100) / 100,\n    profitPercentage: Math.round(p * 100 * 100) / 100,\n    exchangeMultiplier: mult,\n    brokerBaseFee,\n    entryFee,\n    sentToExchange,\n    exchangeReturns,\n    postTradeFee,\n    traderPayout,\n    brokerWinCommission,\n    brokerLoseCommission,\n    actualProfitPercentage\n  };\n}\n\nconst stake = $json.deltaAmount;\nconst profitPercentage = $json.profitPercentage;\nconst position = $json.position || \"CALL\";\n\nconst result = calculateCommissions(stake, profitPercentage);\n\nif (!result.ok) {\n  throw new Error(result.reason);\n}\n\nreturn {\n  ...result,\n  ...{\n    deltaAmount: Math.round($json.deltaAmount * 100) / 100,\n    tradeSymbol: $json.tradeSymbol,\n    duration: $json.duration,\n    position: position,\n    timestamp: new Date().toISOString(),\n    tradeId: `TRADE_${Date.now()}`\n  }\n};"
      },
      "id": "826a3b84-13f9-4e9f-92f7-8bc471112bd0",
      "name": "Calculate Commissions1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1040,
        848
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://deriv-proxy-service-2.onrender.com/api/trading/trade",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Key",
              "value": "secure-production-key-2025"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"symbol\": \"{{$json.tradeSymbol || 'R_100'}}\",\n  \"amount\": {{$json.sentToExchange || 1}},\n  \"contractType\": \"{{$json.position || 'CALL'}}\",\n  \"duration\": {{$json.duration || 5}},\n  \"durationUnit\": \"t\",\n  \"currency\": \"USD\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -624,
        1008
      ],
      "id": "538ac6ed-e77d-4653-b692-4902f80c07ad",
      "name": "Execute Deriv Trade"
    },
    {
      "parameters": {
        "functionCode": "// Simplified trade execution response processor\n// Real-time results will come via WebSocket, so we just process the initial execution\nconst tradeResponse = $json;\n\nif (!tradeResponse || !tradeResponse.success || !tradeResponse.data) {\n  throw new Error(\"Invalid trade response from Deriv API\");\n}\n\nconst tradeData = tradeResponse.data;\nconst contractId = tradeData.contractId;\n\n// Get original parameters from input\nconst inputData = $input.all()[0].json;\nconst originalStake = inputData.sentToExchange || inputData.deltaAmount || 1;\nconst tradeSymbol = inputData.tradeSymbol || \"R_100\";\nconst duration = inputData.duration || 5;\nconst position = inputData.position || \"CALL\";\n\nconsole.log(`‚úÖ Trade executed successfully - Contract ID: ${contractId}`);\nconsole.log(`üì° Real-time results will be received via WebSocket`);\n\n// Return immediate execution data\n// Final results will come via WebSocket in real-time\nreturn {\n  // Trade identification\n  tradeId: `TRADE_${contractId}_${Date.now()}`,\n  contractId: contractId,\n  \n  // Original parameters\n  originalStake: Number(originalStake),\n  tradeSymbol: tradeSymbol,\n  duration: Number(duration),\n  position: position,\n  \n  // Trade execution data\n  buyPrice: Number(tradeData.buyPrice),\n  payout: Number(tradeData.payout),\n  balanceAfter: Number(tradeData.balanceAfter),\n  \n  // Execution metadata\n  executionTimestamp: new Date().toISOString(),\n  transactionId: tradeData.transactionId,\n  longcode: tradeData.longcode,\n  shortcode: tradeData.shortcode,\n  purchaseTime: tradeData.purchaseTime,\n  startTime: tradeData.startTime,\n  \n  // Status\n  status: 'executed',\n  message: 'Trade executed successfully - awaiting real-time results via WebSocket',\n  \n  // Calculate initial commission\n  actualBrokerCommission: Number(originalStake - tradeData.buyPrice),\n  \n  // Additional data for logging\n  profitPercentage: inputData.profitPercentage || 0\n};"
      },
      "id": "0fafb4cd-0b2a-4c4f-ac20-67508a5ee086",
      "name": "Process Trade Result2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -384,
        1008
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://deriv-proxy-service-2.onrender.com/api/trading/trade",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Key",
              "value": "secure-production-key-2025"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "=     {\n  \"symbol\": \"{{$json.tradeSymbol || 'R_100'}}\",\n  \"amount\": {{$json.sentToExchange || 1}},\n  \"contractType\": \"{{$json.position || 'CALL'}}\",\n  \"duration\": {{$json.duration || 5}},\n  \"durationUnit\": \"t\",\n  \"currency\": \"USD\",\n  \"waitForCompletion\" : true\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -608,
        1344
      ],
      "id": "980548b4-8fd8-47df-af3c-7ec00a46251b",
      "name": "Execute Deriv Trade1"
    },
    {
      "parameters": {
        "functionCode": "// Get original trade parameters from previous nodes\nconst originalStake = $('Generate Profit Percentage1').first().$json.deltaAmount;\nconst tradeSymbol = $('Generate Profit Percentage1').first().$json.tradeSymbol;\nconst duration = $('Generate Profit Percentage1').first().$json.duration;\nconst position = $('Generate Profit Percentage1').first().$json.position;\nconst profitPercentage = $('Generate Profit Percentage1').first().$json.profitPercentage;\n\n// Validate API response\nif (!$json.success) {\n  throw new Error(`Trade execution failed: ${$json.error || 'Unknown error'}`);\n}\n\nconst tradeData = $json.data;\nif (!tradeData) {\n  throw new Error('No trade data received from Deriv API');\n}\n\n// Extract real trade data from API response\nconst contractId = tradeData.contractId;\nconst buyPrice = tradeData.buyPrice;\nconst expectedPayout = tradeData.payout;\nconst balanceAfter = tradeData.balanceAfter;\n\n// Calculate trade results (using real API data when available)\nconst tradeWon = tradeData.tradeWon !== undefined ? tradeData.tradeWon : (expectedPayout > originalStake);\nconst actualPayout = tradeData.finalPayout || expectedPayout;\nconst actualLoss = tradeWon ? 0 : originalStake;\nconst actualBrokerCommission = originalStake - buyPrice;\nconst profit = tradeWon ? (actualPayout - originalStake) : -originalStake;\n\n// Generate metadata\nconst tradeId = `TRADE_${contractId}_${Date.now()}`;\nconst finalTimestamp = new Date().toISOString();\n\nreturn {\n  // Original trade parameters\n  originalStake: originalStake,\n  tradeSymbol: tradeSymbol,\n  duration: duration,\n  position: position,\n  profitPercentage: profitPercentage,\n  \n  // Real API response data\n  contractId: contractId,\n  buyPrice: buyPrice,\n  expectedPayout: expectedPayout,\n  balanceAfter: balanceAfter,\n  \n  // Calculated results\n  tradeWon: tradeWon,\n  actualPayout: actualPayout,\n  actualLoss: actualLoss,\n  actualBrokerCommission: actualBrokerCommission,\n  profit: profit,\n  \n  // Metadata\n  tradeId: tradeId,\n  finalTimestamp: finalTimestamp,\n  tradeResult: tradeWon ? 'WIN' : 'LOSS',\n  \n  // Additional API data\n  transactionId: tradeData.transactionId,\n  longcode: tradeData.longcode,\n  shortcode: tradeData.shortcode,\n  purchaseTime: tradeData.purchaseTime,\n  startTime: tradeData.startTime,\n  \n  // Success indicators\n  success: true,\n  message: $json.message || 'Trade executed successfully'\n};"
      },
      "id": "4227a5a9-081c-428c-b322-0e8d5fd4e1e9",
      "name": "Process Trade Result",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -384,
        1344
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "WebSocket Connection": {
      "main": [
        [
          {
            "node": "WebSocket Auth Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WebSocket Auth Handler": {
      "main": [
        [
          {
            "node": "WebSocket Message Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "WebSocket Status Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "WebSocket Auth Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WebSocket Message Filter": {
      "main": [
        [
          {
            "node": "WebSocket Trade Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WebSocket Trade Processor": {
      "main": [
        [
          {
            "node": "WebSocket Telegram Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WebSocket Status Filter": {
      "main": [
        [
          {
            "node": "WebSocket Status Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WebSocket Status Processor": {
      "main": [
        [
          {
            "node": "WebSocket Status Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WebSocket Auth Filter": {
      "main": [
        [
          {
            "node": "WebSocket Auth Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WebSocket Auth Processor": {
      "main": [
        [
          {
            "node": "WebSocket Auth Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Parse chat input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse chat input1": {
      "main": [
        [
          {
            "node": "Generate Profit Percentage1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post-Trade Telegram Notification1": {
      "main": [
        []
      ]
    },
    "Log to Google Sheets1": {
      "main": [
        [
          {
            "node": "Track Commissions1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Profit Percentage1": {
      "main": [
        [
          {
            "node": "Calculate Commissions1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Commissions1": {
      "main": [
        [
          {
            "node": "Pre-Trade Telegram Notification1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Execute Deriv Trade",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Deriv Trade": {
      "main": [
        [
          {
            "node": "Process Trade Result2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Trade Result2": {
      "main": [
        [
          {
            "node": "Post-Trade Telegram Notification1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log to Google Sheets1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Deriv Trade1": {
      "main": [
        [
          {
            "node": "Process Trade Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ccd08518-d988-452c-8560-341f4f779122",
  "meta": {
    "instanceId": "a52f30734bd41425779371056ba841f775f3fee19f36ca15e7463d96a245e4a2"
  },
  "id": "yHJUBby9KDcJYzzh",
  "tags": []
}